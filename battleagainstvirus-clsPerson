Option Explicit

Private Type PersonType
    PositionX As Integer
    PositionY As Integer
    PreviousPositionX As Integer
    previousPositionY As Integer
    Status As Integer
    CoolingPeriod As Integer
    MoveIntention As Single
End Type

Private Persons() As PersonType

'Private DirectionX As Integer

'Private DirectionY As Integer

Private FoodX As Integer

Private FoodY As Integer

Private PlayRange As Range

Private BirthRange As Range

Private Const SnakeLength As Integer = 20

Private BirdImage As Range

Private BirdHeight As Integer

Private BirdWidth As Integer

Private BirdCell As Range

Private BirdPreviousRectangle As Range

Private BirdVerticalMovement As Long

Private Const Gravity As Byte = 2

Private Const FlapHeight As Integer = -16

Private Const DiveDepth As Integer = 16

Private FloorRange As Range

Private PreviousUpKeyState As Integer

Private PreviousDownKeyState As Integer

Private PreviousLeftKeyState As Integer

Private PreviousRightKeyState As Integer

'Private pGameSheet As clsGameSheet



Private Sub Class_Initialize()
    'store info about bird image
    PersonBirth

    
End Sub

Public Sub Update()
    Application.ScreenUpdating = False
    Dim x As Integer
    For x = 0 To UBound(Persons)
        shCity.Cells(Persons(x).PositionY, Persons(x).PositionX).ClearFormats
        Persons(x).PreviousPositionX = Persons(x).PositionX
        Persons(x).previousPositionY = Persons(x).PositionY
        Do
            Persons(x).PositionX = Persons(x).PreviousPositionX
            Persons(x).PositionY = Persons(x).previousPositionY
            Persons(x).PositionX = Persons(x).PositionX + Int(RandNorm(0, 1) * 10)
            Persons(x).PositionY = Persons(x).PositionY + Int(RandNorm(0, 1) * 10)
        Loop While DetectingCollisionWall(Persons(x).PositionX, Persons(x).PositionY)
        'shCity.Cells(Persons(x).PositionY, Persons(x).PositionX).Interior.Color = GameColour.gcGrassGreen
    Next
End Sub

Private Sub PersonBirth()

    Dim x As Integer
    Dim upperbound As Integer
    Dim lowerbound As Integer
    Application.ScreenUpdating = False
    ReDim Preserve Persons(0 To CityPopulation)
    
    For x = 0 To CityPopulation

        Persons(x).PositionX = Int((CityEndX - 50 - CityStartX + 1) * Rnd + CityStartX + 20)
        Persons(x).PositionY = Int((CityEndY - 50 - CityStartY + 1) * Rnd + CityStartY + 20)

        shCity.Cells(Persons(x).PositionY, Persons(x).PositionX).Interior.Color = GameColour.gcGrassGreen
        'Debug.Print Persons(x).PositionY, Persons(x).PositionX
    Next
    
End Sub
Public Sub DrawPerson()
    Dim x As Integer
    For x = 0 To UBound(Persons)
        'Debug.Print Persons(x).PositionX, Persons(x).PositionY
        shCity.Cells(Persons(x).PositionY, Persons(x).PositionX).Interior.Color = GameColour.gcGrassGreen
    Next


End Sub




Private Sub CheckKeys()

    If GetAsyncKeyState(vbKeyUp) <> 0 And _
    PreviousUpKeyState = 0 Then upkey
    
    If GetAsyncKeyState(vbKeyDown) <> 0 And _
    PreviousDownKeyState = 0 Then downkey
    
    If GetAsyncKeyState(vbKeyLeft) <> 0 And _
    PreviousLeftKeyState = 0 Then leftkey
    
    If GetAsyncKeyState(vbKeyRight) <> 0 And _
    PreviousRightKeyState = 0 Then rightkey
    
    PreviousUpKeyState = GetAsyncKeyState(vbKeyUp)
    
    PreviousDownKeyState = GetAsyncKeyState(vbKeyDown)
    
    PreviousLeftKeyState = GetAsyncKeyState(vbKeyLeft)
    
    PreviousRightKeyState = GetAsyncKeyState(vbKeyRight)
    
    'Debug.Print GetAsyncKeyState(vbKeyUp), GetAsyncKeyState(vbKeyDown), GetAsyncKeyState(vbKeyLeft), GetAsyncKeyState(vbKeyRight)

End Sub



Private Sub Flap()

    BirdVerticalMovement = FlapHeight

End Sub

Private Sub Dive()

    BirdVerticalMovement = DiveDepth

End Sub

Public Function DetectingCollision() As Boolean
    'If shGame.Cells(Snake(0).PositionX, Snake(0).PositionY).Interior.Color = GameColour.gcBlack Then
    '    DetectingCollision = True
    'Else
    '    DetectingCollision = False
    'End If
End Function

Private Function DetectingCollisionWall(UX As Integer, UY As Integer) As Boolean
    'If shGame.Cells(Snake(0).PositionX, Snake(0).PositionY).Interior.Color = GameColour.gcBlack Then
    '    DetectingCollision = True
    'Else
    '    DetectingCollision = False
    'End If
    If UX < CityStartX Or UX > CityEndX Or UY < CityStartY Or UY > CityEndY Then
        DetectingCollisionWall = True
    Else
        DetectingCollisionWall = False
    End If
    
End Function

'Public Property Set GameSheet(Value As clsGameSheet)

'    Set pGameSheet = Value
    
'    Set BirdCell = _
'    pGameSheet.GameRange.Cells(Int(pGameSheet.GameHeight / 2), 40)
    
'    BirdImage.Copy BirdCell
    
'    Set FloorRange = pGameSheet.FloorRange.Cells(1, 1)

'End Property


