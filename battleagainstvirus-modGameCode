Private GameTimer As clsTimer
Dim Citizen As clsPerson
Dim City As clsCity
'Private GameSheet As clsGameSheet

Public Sub InitialiseGame()

    Set City = New clsCity
    Set Citizen = New clsPerson

    'Called once when game first starts
    
    'Used to set starting parameters
    
    'Begins the game timer
    
    'SetGameKeys
    
    'Set GameSheet = New clsGameSheet
    
    'GameSheet.CreateGameSheet
    
    Set Sn = New clsSnake
    
    Sn.Draw
    
    SetGameKeys
    
    'Set Bird.GameSheet = GameSheet
    'Bird.GameSheet.CreateGameSheet
    'Set Bird.GameSheet = GameSheet
    
    Set GameTimer = New clsTimer
    
    GameTimer.StartTimer

End Sub

Public Sub TerminateGame()

    'Called once when game ends
    
    'Used to tidy up
    
    Set GameTimer = Nothing
    
    Set Sn = Nothing
    
    'shMenu.Activate
    
    'Set GameSheet = Nothing
    
    ResetKeys

End Sub

Public Sub UpdateAndDrawGame()

    'Called by the SetTimer function
    
    'Runs once for each tick of the timer clock
    
    'Updates all game logic
    
    'Draws all game objects
    
    If GetAsyncKeyState(vbKeyTab) <> 0 Then
    
        TerminateGame
        
        Exit Sub
    
    End If
    
    Sn.Update
    
    If Sn.DetectingCollision Then
        TerminateGame
        Exit Sub
    End If
    Sn.Draw

End Sub

Private Sub SetGameKeys()

    Application.OnKey "{ESC}", ""
    
    Application.OnKey "{UP}", "upkey"
    
    Application.OnKey "{DOWN}", "downkey"
    
    Application.OnKey "{LEFT}", "leftkey"
    
    Application.OnKey "{RIGHT}", "rightkey"
    
    Application.OnKey "{TAB}", ""

End Sub

Private Sub ResetKeys()

    Application.OnKey "{UP}"
    
    Application.OnKey "{DOWN}"
    
    Application.OnKey "{TAB}"
    
    Application.OnKey "{ESC}"
    
    Application.OnKey "{LEFT}"
    
    Application.OnKey "{RIGHT}"

End Sub



Public Sub Pause(sngSecs As Single)
    Dim sngEnd As Single
    sngEnd = Timer + sngSecs
    While Timer < sngEnd
        DoEvents
    Wend
End Sub
Sub WasteTime(Finish As Long)
 
    Dim NowTick As Long
    Dim EndTick As Long
 
    EndTick = GetTickCount + (Finish)
     
    Do
 
        NowTick = GetTickCount
        DoEvents
 
    Loop Until NowTick >= EndTick
 
End Sub

Private Sub DelayMs(ms As Long)
    Debug.Print TimeValue(Now)
    Application.Wait (Now + (ms * 0.00000001))
    Debug.Print TimeValue(Now)
End Sub

Public Sub TestPause()
    Call DelayMs(500)
    MsgBox "done"
End Sub

Sub StartTimer()
    initialSnake
    TimerActive = True
    'Debug.Print TimerActive
    Call moveSnake
End Sub

Private Sub Start_Timer()
    TimerActive = True
    Debug.Print "yes", timeactive
    Application.OnTime Now() + TimeValue("00:00:01"), "moveSnake"
End Sub

Private Sub Stop_Timer()
    TimerActive = False
    Debug.Print TimerActive
End Sub

Private Sub Timers()
    If TimerActive Then
        ActiveSheet.Cells(1, 1).Value = Time
        Application.OnTime Now() + TimeValue("00:00:01"), "Timer"
    End If
End Sub

Private Sub Snake()
    If TimerActive Then
        ActiveSheet.Cells(2, 2).Color = vbBlack
        Application.OnTime Now() + TimeValue("00:00:01"), "drawSnake"
    End If
End Sub

'Private Sub drawSnake()
'    If TimerActive Then
'        ActiveSheet.Cells(2, 2).Color = vbBlack
'        Application.OnTime Now() + TimeValue("00:00:01"), "drawSnake"
'    End If
'End Sub

Private Sub initialSnake()
    Dim rpx As Integer
    Dim rpy As Integer

    'ReDim Preserve Sn(0 To 2)
    'Do wh
    Do
        Sn(0).dx = Int((3 - 1 + 1) * Rnd) - 1
        Sn(0).dy = Int((3 - 1 + 1) * Rnd) - 1
    Loop Until (Sn(0).dx * Sn(0).dy = 0) And (Sn(0).dx + Sn(0).dy <> 0)
    'Debug.Print snhead.direction
    Sn(0).py = Int((40 - 9 + 1) * Rnd + 9)
    'sn(0).py = Int((64 - 12 + 1) * Rnd + 12)
    'sn(0).px = Int((35 - 14 + 1) * Rnd + 14)
    Sn(0).px = Int((31 - 13 + 1) * Rnd + 13)
    'Debug.Print sn(0).dx, sn(0).dy
    ActiveSheet.Cells(Sn(0).px, Sn(0).py).Interior.ColorIndex = 1
    Sn(1).dx = Sn(0).dx
    Sn(1).dy = Sn(0).dy
    Sn(1).px = Sn(0).px - Sn(0).dx
    Sn(1).py = Sn(0).py - Sn(0).dy
    ActiveSheet.Cells(Sn(1).px, Sn(1).py).Interior.ColorIndex = 1
    Sn(2).dx = Sn(1).dx
    Sn(2).dy = Sn(1).dy
    Sn(2).px = Sn(1).px - Sn(1).dx
    Sn(2).py = Sn(1).py - Sn(1).dy
    ActiveSheet.Cells(Sn(2).px, Sn(2).py).Interior.ColorIndex = 1
    'ReDim Preserve wa(0 To 52)
    
    Do
        rpy = Int((40 - 9 + 1) * Rnd + 9)
        rpx = Int((31 - 13 + 1) * Rnd + 13)
    Loop Until ActiveSheet.Cells(rpx, rpy).Interior.ColorIndex <> 1
    ActiveSheet.Cells(rpx, rpy).Interior.ColorIndex = 12
    
    'timeactive = True
    'sn(0).px
End Sub
Private Sub detectWall()
    If ActiveSheet.Cells(Sn(0).px, Sn(0).py).Interior.ColorIndex = 16 Then
        timeactive = False
    End If
End Sub
Private Sub moveSnake()
    'Dim i As Integer
    'Debug.Print UBound(sn)
    'Debug.Print "timeactive", timeactive
    'ReDim Preserve sn(0 To 0)
    Dim n As Integer
    Dim rpx As Integer
    Dim rpy As Integer
    
    timeactive = True
    If timeactive <> False Then
            'For i = 0 To UBound(Sn)
        Sn(i).ox = Sn(i).px
        Sn(i).oy = Sn(i).py
        If i = 0 Then
            Sn(i).px = Sn(i).px + Sn(i).dx
            Sn(i).py = Sn(i).py + Sn(i).dy
            If ActiveSheet.Cells(Sn(0).px, Sn(0).py).Interior.ColorIndex = 1 Then
                timeactive = False
                Exit Sub
            End If

            If ActiveSheet.Cells(Sn(0).px, Sn(0).py).Interior.ColorIndex = 12 Then
                'n = UBound(Sn) + 1
                Debug.Print n
                'ReDim Preserve Sn(o To n)
                Sn(n).dx = Sn(n - 1).dx
                Sn(n).dy = Sn(n - 1).dy
                Sn(n).px = Sn(n - 1).px
                Sn(n).py = Sn(n - 1).py
                Do
                    rpy = Int((64 - 12 + 1) * Rnd + 12)
                    rpx = Int((35 - 14 + 1) * Rnd + 14)
                Loop Until ActiveSheet.Cells(rpx, rpy).Interior.ColorIndex <> 1
                ActiveSheet.Cells(rpx, rpy).Interior.ColorIndex = 12
            End If
                ActiveSheet.Cells(Sn(i).px, Sn(i).py).Interior.ColorIndex = 1
                ActiveSheet.Cells(Sn(i).ox, Sn(i).oy).Interior.ColorIndex = 2
            Else
                Sn(i).px = Sn(i - 1).ox
                Sn(i).py = Sn(i - 1).oy
                ActiveSheet.Cells(Sn(i).px, Sn(i).py).Interior.ColorIndex = 1
                ActiveSheet.Cells(Sn(i).ox, Sn(i).oy).Interior.ColorIndex = 2
            End If
        'Next

        Call Sleep(250)
        'For i = 0 To UBound(Sn)
        Sn(i).ox = Sn(i).px
        Sn(i).oy = Sn(i).py
        If i = 0 Then
            Sn(i).px = Sn(i).px + Sn(i).dx
            Sn(i).py = Sn(i).py + Sn(i).dy
            If ActiveSheet.Cells(Sn(0).px, Sn(0).py).Interior.ColorIndex = 1 Then
                timeactive = False
                Exit Sub
            End If

            If ActiveSheet.Cells(Sn(0).px, Sn(0).py).Interior.ColorIndex = 12 Then
                'n = UBound(Sn) + 1
                Debug.Print n
                'ReDim Preserve Sn(o To n)
                'Sn(n).dx = Sn(n - 1).dx
                'Sn(n).dy = Sn(n - 1).dy
                'Sn(n).px = Sn(n - 1).px
                'Sn(n).py = Sn(n - 1).py
                Do
                    rpy = Int((64 - 12 + 1) * Rnd + 12)
                    rpx = Int((35 - 14 + 1) * Rnd + 14)
                Loop Until ActiveSheet.Cells(rpx, rpy).Interior.ColorIndex <> 1
                ActiveSheet.Cells(rpx, rpy).Interior.ColorIndex = 12
            End If
                ActiveSheet.Cells(Sn(i).px, Sn(i).py).Interior.ColorIndex = 1
                ActiveSheet.Cells(Sn(i).ox, Sn(i).oy).Interior.ColorIndex = 2
            Else
                Sn(i).px = Sn(i - 1).ox
                Sn(i).py = Sn(i - 1).oy
                ActiveSheet.Cells(Sn(i).px, Sn(i).py).Interior.ColorIndex = 1
                ActiveSheet.Cells(Sn(i).ox, Sn(i).oy).Interior.ColorIndex = 2
            End If
        'Next
        
        Call Sleep(250)
        
        'For i = 0 To UBound(Sn)
        'Sn(i).ox = Sn(i).px
        'Sn(i).oy = Sn(i).py
        If i = 0 Then
            'n(i).px = Sn(i).px + Sn(i).dx
            'Sn(i).py = Sn(i).py + Sn(i).dy
            If ActiveSheet.Cells(Sn(0).px, Sn(0).py).Interior.ColorIndex = 1 Then
                timeactive = False
                Exit Sub
            End If

            If ActiveSheet.Cells(Sn(0).px, Sn(0).py).Interior.ColorIndex = 12 Then
                'n = UBound(Sn) + 1
                Debug.Print n
                'ReDim Preserve Sn(o To n)
                'Sn(n).dx = Sn(n - 1).dx
                'n(n).dy = Sn(n - 1).dy
                'Sn(n).px = Sn(n - 1).px
                'Sn(n).py = Sn(n - 1).py
                Do
                    rpy = Int((64 - 12 + 1) * Rnd + 12)
                    rpx = Int((35 - 14 + 1) * Rnd + 14)
                Loop Until ActiveSheet.Cells(rpx, rpy).Interior.ColorIndex <> 1
                ActiveSheet.Cells(rpx, rpy).Interior.ColorIndex = 12
            End If
                ActiveSheet.Cells(Sn(i).px, Sn(i).py).Interior.ColorIndex = 1
                ActiveSheet.Cells(Sn(i).ox, Sn(i).oy).Interior.ColorIndex = 2
            Else
                Sn(i).px = Sn(i - 1).ox
                Sn(i).py = Sn(i - 1).oy
                ActiveSheet.Cells(Sn(i).px, Sn(i).py).Interior.ColorIndex = 1
                ActiveSheet.Cells(Sn(i).ox, Sn(i).oy).Interior.ColorIndex = 2
            End If
        'Next

        Call Sleep(250)
        
        'For i = 0 To UBound(Sn)
        'Sn(i).ox = Sn(i).px
        'Sn(i).oy = Sn(i).py
        'If i = 0 Then
          '  Sn(i).px = Sn(i).px + Sn(i).dx
          '  Sn(i).py = Sn(i).py + Sn(i).dy
          '  If ActiveSheet.Cells(Sn(0).px, Sn(0).py).Interior.ColorIndex = 1 Then
          '      timeactive = False
          '      Exit Sub
         '   End If

          '  If ActiveSheet.Cells(Sn(0).px, Sn(0).py).Interior.ColorIndex = 12 Then
         '       n = UBound(Sn) + 1
          '      Debug.Print n
           '     ReDim Preserve Sn(o To n)
         '       Sn(n).dx = Sn(n - 1).dx
            '    Sn(n).dy = Sn(n - 1).dy
            '    Sn(n).px = Sn(n - 1).px
            '    Sn(n).py = Sn(n - 1).py
                Do
                    rpy = Int((64 - 12 + 1) * Rnd + 12)
                    rpx = Int((35 - 14 + 1) * Rnd + 14)
                Loop Until ActiveSheet.Cells(rpx, rpy).Interior.ColorIndex <> 1
                ActiveSheet.Cells(rpx, rpy).Interior.ColorIndex = 12
            End If
                ActiveSheet.Cells(Sn(i).px, Sn(i).py).Interior.ColorIndex = 1
                ActiveSheet.Cells(Sn(i).ox, Sn(i).oy).Interior.ColorIndex = 2
            'Else
           '    Sn(i).px = Sn(i - 1).ox
            '    Sn(i).py = Sn(i - 1).oy
                ActiveSheet.Cells(Sn(i).px, Sn(i).py).Interior.ColorIndex = 1
                ActiveSheet.Cells(Sn(i).ox, Sn(i).oy).Interior.ColorIndex = 2
           ' End If
        'Next

        Application.OnTime Now() + TimeValue("00:00:01"), "moveSnake"
    'End If
End Sub

Sub drawSnake()


End Sub
Sub rightkey()
    If DirectionX = -1 And DirectionY = 0 Then
        DirectionX = 0
        DirectionY = 1
    ElseIf DirectionX = 0 And DirectionY = 1 Then
        DirectionX = 0
        DirectionY = 1
    ElseIf DirectionX = 1 And DirectionY = 0 Then
        DirectionX = 0
        DirectionY = 1
    ElseIf DirectionX = 0 And DirectionY = -1 Then
        DirectionX = 0
        DirectionY = -1
    End If
End Sub
Sub leftkey()
    If DirectionX = -1 And DirectionY = 0 Then
        DirectionX = 0
        DirectionY = -1
    ElseIf DirectionX = 0 And DirectionY = 1 Then
        DirectionX = 0
        DirectionY = 1
    ElseIf DirectionX = 1 And DirectionY = 0 Then
        DirectionX = 0
        DirectionY = -1
    ElseIf DirectionX = 0 And DirectionY = -1 Then
        DirectionX = 0
        DirectionY = -1
    End If
End Sub
Sub upkey()
    If DirectionX = -1 And DirectionY = 0 Then
        DirectionX = -1
        DirectionY = 0
    ElseIf DirectionX = 0 And DirectionY = 1 Then
        DirectionX = -1
        DirectionY = 0
    ElseIf DirectionX = 1 And DirectionY = 0 Then
        DirectionX = 1
        DirectionY = 0
    ElseIf DirectionX = 0 And DirectionY = -1 Then
        DirectionX = -1
        DirectionY = 0
    End If
End Sub
Sub downkey()
    If DirectionX = -1 And DirectionY = 0 Then
        DirectionX = -1
        DirectionY = 0
    ElseIf DirectionX = 0 And DirectionY = 1 Then
        DirectionX = 1
        DirectionY = 0
    ElseIf DirectionX = 1 And DirectionY = 0 Then
        DirectionX = 1
        DirectionY = 0
    ElseIf DirectionX = 0 And DirectionY = -1 Then
        DirectionX = 1
        DirectionY = 0
    End If
End Sub

Sub ResetGame()
    ActiveSheet.Range("PlayGround").ClearFormats
End Sub

Sub testrandom()
    Dim x As Double
    x = RandNorm(0, 1)
    Debug.Print x
    
End Sub

Function RandNorm(meanVal As Double, Stdev As Double)
    RandNorm = WorksheetFunction.NormInv(Rnd, meanVal, Stdev)
End Function

